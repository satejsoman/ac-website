{"version":3,"sources":["components/Plots.js","components/C19ApiChart.js","App.js","serviceWorker.js","index.js"],"names":["state_codes","C19ApiChart","props","state","data","fetch","then","response","json","flattened","Object","keys","forEach","_","ts","date","total","push","setState","console","log","this","geography","margin","top","right","left","bottom","strokeDasharray","dataKey","type","vizType","stroke","activeDot","r","React","Component","cardHeader","name","Card","Header","as","class","App","className","Row","Col","Body","Subtitle","sm","id","Form","Group","controlId","Label","Control","size","custom","onChange","e","target","value","label","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1082b552.chunk.js","sourcesContent":["export const state_codes = {\n    // \"AN\": \"Andaman and Nicobar Islands\",\n    \"AP\": \"Andhra Pradesh\",\n    // \"AR\": \"Arunachal Pradesh\",\n    \"AS\": \"Assam\",\n    \"BR\": \"Bihar\",\n    // \"CH\": \"Chandigarh\",\n    \"CT\": \"Chhattisgarh\",\n    \"DL\": \"Delhi\",\n    \"GA\": \"Goa\",\n    \"GJ\": \"Gujarat\",\n    \"HR\": \"Haryana\",\n    \"HP\": \"Himachal Pradesh\",\n    \"JK\": \"Jammu and Kashmir\",\n    \"JH\": \"Jharkhand\",\n    \"KA\": \"Karnataka\",\n    \"KL\": \"Kerala\",\n    \"MP\": \"Madhya Pradesh\",\n    \"MH\": \"Maharashtra\",\n    \"MN\": \"Manipur\",\n    \"ML\": \"Meghalaya\",\n    \"OR\": \"Odisha\",\n    \"PB\": \"Punjab\",\n    \"RJ\": \"Rajasthan\",\n    \"SK\": \"Sikkim\",\n    \"TN\": \"Tamil Nadu\",\n    \"TG\": \"Telangana\",\n    \"TR\": \"Tripura\",\n    \"UP\": \"Uttar Pradesh\",\n    \"UT\": \"Uttarakhand\",\n    \"WB\": \"West Bengal\",\n}\n\n","import React from \"react\";\nimport {LineChart, XAxis, YAxis, Tooltip, Legend, Line, CartesianGrid, ResponsiveContainer} from \"recharts\";\n\nclass C19ApiChart extends React.Component { \n    constructor(props) {\n        super(props);\n        this.state = { data: null };\n      }\n     \n    componentDidMount() {\n        fetch('https://api.covid19india.org/v3/timeseries.json')\n            .then(response => response.json())\n            .then(data => {\n                var flattened = {}  \n                Object.keys(data).forEach((state, _) => {\n                    var ts = []\n                    Object.keys(data[state]).forEach((date, _) => {\n                        var total = data[state][date][\"total\"] || {}\n                        ts.push({\n                            \"date\": date, \n                            \"confirmed\": total[\"confirmed\"] || 0,\n                            \"recovered\": total[\"recovered\"] || 0,\n                            \"tested\":    total[\"tested\"]    || 0,\n                        })\n                    })\n                    flattened[state] = ts\n                })\n            this.setState({ data: flattened })\n        });\n    }\n\n    render() { \n        console.log(\"rendering chart\")\n        if (this.state.data === null)\n            return <p>l o a d i n g . . .</p>\n        console.log(this.state.data)\n        return <>\n        <ResponsiveContainer>\n        <LineChart data={this.state.data[this.props.geography]} margin={{top: 5, right: 30, left: 20, bottom: 5}}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"date\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Line type=\"monotone\" dataKey={this.props.vizType} stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n        </LineChart>\n        </ResponsiveContainer>\n        </>\n    }\n}\n\nexport default C19ApiChart;","import React from \"react\";\n\nimport { Row, Col } from \"react-bootstrap\";\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\";\n\nimport { state_codes } from \"./components/Plots.js\";\nimport \"./App.css\";\nimport C19ApiChart from \"./components/C19ApiChart.js\";\n\nconst cardHeader = (name) => (\n  <Card.Header as=\"h2\" class=\"card-header bg-light border-dark\">\n    {name}\n  </Card.Header>\n);\n\nexport default class App extends React.Component {\n  state = {\n    vizType: \"confirmed\",\n    geography: \"AN\",\n  };\n\n  render() {\n    return (\n      <>\n        <div className=\"App container\">\n          <Row>\n            <Col>\n              <Card className=\"bg-dark text-white text-center\">\n                <Card.Header as=\"h1\" className=\"bg-dark text-white text-center\">\n                  {\" \"}\n                  covin adaptive control [STAGING] website {\" \"}\n                </Card.Header>\n                <Card.Body>\n                  <Card.Subtitle as=\"h3\" className=\"text-secondary\">\n                    {\" \"}\n                    where the colors can be anything i like\n                  </Card.Subtitle>\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n          <Row>\n            <Col sm={8}>\n              <Card id=\"viz_box\">\n                {cardHeader(\"Analysis\")}\n                <Card.Body>\n                  <div>\n                    <Form>\n                      <Row>\n                        <Col>\n                          <Form.Group controlId=\"geoForm\">\n                            <Form.Label as=\"h3\" className=\"text-dark\">\n                              Geography\n                            </Form.Label>\n                            <Form.Control\n                              as=\"select\"\n                              size=\"lg\"\n                              custom\n                              onChange={(e) => {\n                                this.setState({ geography: e.target.value });\n                              }}>\n                              {/* <option value=\"IN\">All India</option> */}\n                              <optgroup label=\"States\">\n                                {Object.keys(state_codes).map((key) => (\n                                  <option value={key}>{state_codes[key]}</option>\n                                ))}\n                              </optgroup>\n                            </Form.Control>\n                          </Form.Group>\n                        </Col>\n                        <Col>\n                          <Form.Group controlId=\"vizForm\">\n                            <Form.Label as=\"h3\" className=\"text-dark\">\n                              Visualization\n                            </Form.Label>\n                            <Form.Control\n                              as=\"select\"\n                              size=\"lg\"\n                              custom\n                              onChange={(e) => {\n                                this.setState({ vizType: e.target.value });\n                              }}>\n                              <optgroup label=\"Plots\">\n                                <option value=\"confirmed\">confirmed</option>\n                                <option value=\"recovered\">recovered</option>\n                                <option value=\"tested\">tested</option>\n                              </optgroup>\n                            </Form.Control>\n                          </Form.Group>\n                        </Col>\n                      </Row>\n                    </Form>\n                  </div>\n                </Card.Body>\n                <C19ApiChart vizType={this.state.vizType} geography={this.state.geography}/>\n              </Card>\n            </Col>\n            <Col sm={4}>\n              <Card id=\"detail_box\">\n                {cardHeader(\"Details\")}\n                <Card.Body>\n                </Card.Body>\n              </Card>\n              <br></br>\n            </Col>\n          </Row>\n        </div>\n      </>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport './corporate.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}